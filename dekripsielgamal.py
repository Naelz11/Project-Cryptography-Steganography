# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dekripsielgamal.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import docx
import time
from startwindow import Ui_startwindow
from cryptography.fernet import Fernet
import unicodedata


class Ui_dekripsielgamal(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(600, 700)
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(0, 0, 600, 700))
        self.label_5.setStyleSheet("background-image:url(:/newPrefix/Users/user/Downloads/Free Vector _ Gradient geometric blue technology background.jpeg);\n"
"")
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("../../../../Users/user/Downloads/Premium Vector _ Circuit board Motherboard_ Blue technology background.jpeg"))
        self.label_5.setScaledContents(True)
        self.label_5.setObjectName("label_5")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(200, 120, 241, 41))
        self.label.setStyleSheet("font: 75 15pt \"MS Shell Dlg 2\"; color:rgb(255, 255, 255)")
        self.label.setObjectName("label")
        self.inputdata = QtWidgets.QLineEdit(Dialog)
        self.inputdata.setGeometry(QtCore.QRect(210, 230, 201, 31))
        self.inputdata.setStyleSheet("background-color:rgb(3, 41, 77); color:rgb(255, 255, 255); font-size:11pt")
        self.inputdata.setObjectName("inputdata")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(100, 240, 81, 21))
        self.label_2.setStyleSheet("color:rgb(255, 255, 255); font-size:12pt;")
        self.label_2.setObjectName("label_2")
        self.browsebutton = QtWidgets.QPushButton(Dialog)
        self.browsebutton.setGeometry(QtCore.QRect(424, 230, 81, 31))
        self.browsebutton.setStyleSheet("font-size:10pt;")
        self.browsebutton.setObjectName("browsebutton")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(100, 340, 131, 21))
        self.label_3.setStyleSheet("background-color:rgb(2, 36, 64); color:rgb(255, 255, 255); font-size:12pt;")
        self.label_3.setObjectName("label_3")
        self.kunci_p = QtWidgets.QLineEdit(Dialog)
        self.kunci_p.setGeometry(QtCore.QRect(240, 340, 71, 21))
        self.kunci_p.setStyleSheet("color:rgb(255, 255, 255); background-color:rgb(2, 36, 64); font:11pt;")
        self.kunci_p.setObjectName("kunci_p")
        self.kunci_x = QtWidgets.QLineEdit(Dialog)
        self.kunci_x.setGeometry(QtCore.QRect(330, 340, 71, 20))
        self.kunci_x.setStyleSheet("color:rgb(255, 255, 255); background-color:rgb(2, 36, 64); font-size:11pt;")
        self.kunci_x.setObjectName("kunci_x")
        self.savebutton = QtWidgets.QPushButton(Dialog)
        self.savebutton.setGeometry(QtCore.QRect(330, 424, 81, 31))
        self.savebutton.setStyleSheet("")
        self.savebutton.setObjectName("savebutton")
        self.decryptbutton = QtWidgets.QPushButton(Dialog)
        self.decryptbutton.setGeometry(QtCore.QRect(220, 424, 81, 31))
        self.decryptbutton.setStyleSheet("")
        self.decryptbutton.setObjectName("decryptbutton")
        self.backbutton = QtWidgets.QPushButton(Dialog)
        self.backbutton.setGeometry(QtCore.QRect(30, 630, 81, 31))
        self.backbutton.setStyleSheet("font:11pt\n"
"")
        self.backbutton.setObjectName("backbutton")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.decryptbutton.clicked.connect(self.decrypt_data)
        self.backbutton.clicked.connect(self.open_Elgamal)
        self.browsebutton.clicked.connect(self.browse_file)
        self.savebutton.clicked.connect(self.save_button)

        try:
            private_key = self.load_private_key()
            self.kunci_x.setText(str(private_key))
        except Exception as e:
            print(f"Gagal memuat kunci privat: {e}")

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "DEKRIPSI DATA EL-GAMAL"))
        self.label_2.setText(_translate("Dialog", "Pilih Data"))
        self.browsebutton.setText(_translate("Dialog", "Browse"))
        self.label_3.setText(_translate("Dialog", "Input Kunci Privat"))
        self.savebutton.setText(_translate("Dialog", "Simpan"))
        self.decryptbutton.setText(_translate("Dialog", "Dekripsi"))
        self.backbutton.setText(_translate("Dialog", "<-back"))

    def open_Elgamal(self):
        """Fungsi untuk membuka jendela start"""
        from Elgamal import Ui_Elgamal
        self.window = QtWidgets.QDialog()
        self.ui = Ui_Elgamal()
        self.ui.setupUi(self.window)
        self.window.show()
        
    def load_private_key(self, filename="private_key.enc", key_file="encryption_key.key"):
        with open(key_file, "rb") as kf:
            key = kf.read()
        
        cipher_suite = Fernet(key)
        
        with open(filename, "rb") as file:
            cipher_text = file.read()
            private_key = cipher_suite.decrypt(cipher_text).decode()
        
        return int(private_key)
    
    def browse_file(self):
        options = QtWidgets.QFileDialog.Options()
        file_name, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Pilih File DOCX", "C:/Abdiel", "Word Documents (*.docx); All Files (*)", options=options)
        if file_name:
            try:
                doc = docx.Document(file_name)
                text = []
                for para in doc.paragraphs:
                    text.append(para.text.strip())
                
                if not any(text):
                    QtWidgets.QMessageBox.warning(None, "Peringatan", "File DOCX kosong!")
                    return

                self.inputdata.setText('\n'.join(text))
            except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Error", f"Terjadi kesalahan saat membaca file: {e}")
    
    def decrypt_data(self):
     try:
        # Ambil input dari field yang sesuai
        kunci_p = int(self.kunci_p.text())
        kunci_x = int(self.kunci_x.text())
        cipher_text = self.inputdata.text()

        # Validasi input cipher text
        if not cipher_text:
            QtWidgets.QMessageBox.warning(None, "Peringatan", "Tidak ada teks cipher untuk didekripsi.")
            return

        # Mulai hitung waktu dekripsi
        start_time = time.time()

        # Proses dekripsi ElGamal
        decrypted_message = ""
        cipher_lines = cipher_text.splitlines()

        for line in cipher_lines:
            # Hapus awalan "A:" dan "B:" serta spasi yang tidak diperlukan
            line = line.replace("A:", "").replace("B:", "").replace(" ", "").strip()

            if not line:
                continue  # Lewati baris kosong

            try:
                # Pisahkan pasangan (c1, c2)
                c1, c2 = map(int, line.split(','))

                # Hitung s = c1^x mod p
                s = pow(c1, kunci_x, kunci_p)

                # Hitung m = (c2 * s^-1) mod p menggunakan modular inverse
                m = (c2 * pow(s, kunci_p - 2, kunci_p)) % kunci_p

                # Ubah hasil menjadi karakter
                decrypted_message += chr(m)

            except ValueError as ve:
                QtWidgets.QMessageBox.warning(None, "Peringatan", f"Kesalahan parsing pada: {line}\nDetail: {str(ve)}")
                return

        # Hitung waktu yang diambil untuk proses dekripsi
        end_time = time.time()
        elapsed_time_ms = (end_time - start_time) * 1000  # Konversi ke milidetik
        print(f"Running time: {elapsed_time_ms:.2f} ms")

        # Tampilkan hasil dekripsi
        self.inputdata.setText(decrypted_message)

        # Informasi sukses
        QtWidgets.QMessageBox.information(None, "Sukses", "Data berhasil didekripsi!")

     except ValueError as ve:
        QtWidgets.QMessageBox.critical(None, "Input Error", f"Kesalahan input: {str(ve)}")
     except Exception as e:
        QtWidgets.QMessageBox.critical(None, "Error", f"Terjadi kesalahan saat dekripsi: {str(e)}")

    
    
    def save_button(self):
      decrypted_text = self.inputdata.text()
      if not decrypted_text:
        QtWidgets.QMessageBox.warning(None, "Peringatan", "Tidak ada teks yang didekripsi untuk disimpan!")
        return

      options = QtWidgets.QFileDialog.Options()
      file_name, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Simpan File Hasil Dekripsi", "", "Word Documents (*.docx)", options=options)
      if file_name:
        try:
            with open(file_name, 'w', encoding='utf-8') as file:
                file.write(decrypted_text)
            QtWidgets.QMessageBox.information(None, "Berhasil", "Hasil dekripsi berhasil disimpan!")
        except Exception as e:
            QtWidgets.QMessageBox.critical(None, "Error", f"Terjadi kesalahan saat menyimpan file: {e}")

    
    
    

    
    
    

        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_dekripsielgamal()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
