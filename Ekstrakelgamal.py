# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Ekstrak_file.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
from scipy.io import wavfile
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QFileDialog
import os
from docx import Document
import re
from scipy.fftpack import fft, ifft
import hashlib
import wave
import struct
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_ekstrakselgamal(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(600, 700)
        self.ekstrak_background = QtWidgets.QLabel(Dialog)
        self.ekstrak_background.setGeometry(QtCore.QRect(0, 0, 600, 700))
        self.ekstrak_background.setStyleSheet("background-image:url(:/newPrefix/Users/user/Downloads/Free Vector _ Gradient geometric blue technology background.jpeg);\n"
"image:url(:/newPrefix/Users/user/Downloads/Locks Silhouette Vector PNG, Black Lock Icon, Lock Icons, Black Icons, Black Lock PNG Image For Free Download.jpeg)")
        self.ekstrak_background.setText("")
        self.ekstrak_background.setPixmap(QtGui.QPixmap("../../../../Users/user/Downloads/Premium Vector _ Circuit board Motherboard_ Blue technology background.jpeg"))
        self.ekstrak_background.setScaledContents(True)
        self.ekstrak_background.setObjectName("ekstrak_background")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(230, 110, 181, 71))
        self.label.setStyleSheet("color:rgb(255, 255, 255); font-size:20pt;")
        self.label.setObjectName("label")
        self.Inputembedded = QtWidgets.QLabel(Dialog)
        self.Inputembedded.setGeometry(QtCore.QRect(80, 240, 151, 31))
        self.Inputembedded.setStyleSheet("color:rgb(255, 255, 255); font-size:12pt;")
        self.Inputembedded.setObjectName("Inputembedded")
        self.Hasilekstrak = QtWidgets.QLabel(Dialog)
        self.Hasilekstrak.setGeometry(QtCore.QRect(260, 420, 91, 31))
        self.Hasilekstrak.setStyleSheet("color:rgb(255, 255, 255); font-size:12pt;")
        self.Hasilekstrak.setObjectName("Hasilekstrak")
        self.savebutton = QtWidgets.QPushButton(Dialog)
        self.savebutton.setGeometry(QtCore.QRect(410, 480, 81, 31))
        self.savebutton.setStyleSheet("")
        self.savebutton.setObjectName("savebutton")
        self.input_embedded = QtWidgets.QLineEdit(Dialog)
        self.input_embedded.setGeometry(QtCore.QRect(240, 240, 171, 31))
        self.input_embedded.setStyleSheet("background-color:rgb(3, 41, 77); color:rgb(255, 255, 255); font-size:11pt")
        self.input_embedded.setObjectName("input_embedded")
        self.input_hasilekstrak = QtWidgets.QLineEdit(Dialog)
        self.input_hasilekstrak.setGeometry(QtCore.QRect(220, 480, 171, 31))
        self.input_hasilekstrak.setStyleSheet("background-color:rgb(3, 41, 77); color:rgb(255, 255, 255); font-size:11pt")
        self.input_hasilekstrak.setObjectName("input_hasilekstrak")
        self.ekstrakbutton = QtWidgets.QPushButton(Dialog)
        self.ekstrakbutton.setGeometry(QtCore.QRect(440, 320, 81, 31))
        self.ekstrakbutton.setStyleSheet("font: 75 8pt \"MS Shell Dlg 2\";")
        self.ekstrakbutton.setObjectName("ekstrakbutton")
        self.browsebutton = QtWidgets.QPushButton(Dialog)
        self.browsebutton.setGeometry(QtCore.QRect(440, 240, 81, 31))
        self.browsebutton.setStyleSheet("")
        self.browsebutton.setObjectName("browsebutton")
        self.movetodekripsi = QtWidgets.QPushButton(Dialog)
        self.movetodekripsi.setGeometry(QtCore.QRect(480, 630, 81, 31))
        self.movetodekripsi.setStyleSheet("font:11pt\n"
"")
        self.movetodekripsi.setObjectName("movetodekripsi")
        self.backbutton = QtWidgets.QPushButton(Dialog)
        self.backbutton.setGeometry(QtCore.QRect(30, 630, 81, 31))
        self.backbutton.setStyleSheet("font:11pt\n"
"")
        self.backbutton.setObjectName("backbutton")
        self.Stego_key = QtWidgets.QLabel(Dialog)
        self.Stego_key.setGeometry(QtCore.QRect(80, 320, 151, 31))
        self.Stego_key.setStyleSheet("color:rgb(255, 255, 255); font-size:12pt;")
        self.Stego_key.setObjectName("Stego_key")
        self.input_stegokey = QtWidgets.QLineEdit(Dialog)
        self.input_stegokey.setGeometry(QtCore.QRect(240, 320, 91, 31))
        self.input_stegokey.setStyleSheet("background-color:rgb(3, 41, 77); color:rgb(255, 255, 255); font-size:11pt")
        self.input_stegokey.setObjectName("input_stegokey")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
        # Connect button to function
        self.ekstrakbutton.clicked.connect(self.extract_file_method)
        self.browsebutton.clicked.connect(self.browse_file)
        self.savebutton.clicked.connect(self.save_extracted_file)
        self.backbutton.clicked.connect(self.open_Elgamal)
        self.movetodekripsi.clicked.connect(self.open_dekripsi)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "EKSTRAK FILE"))
        self.Inputembedded.setText(_translate("Dialog", "Input Embeded File"))
        self.Hasilekstrak.setText(_translate("Dialog", "Hasil Ekstrak"))
        self.savebutton.setText(_translate("Dialog", "Simpan"))
        self.ekstrakbutton.setText(_translate("Dialog", "Ekstrak"))
        self.browsebutton.setText(_translate("Dialog", "Browse"))
        self.movetodekripsi.setText(_translate("Dialog", "Dekripsi"))
        self.backbutton.setText(_translate("Dialog", "<-back"))
        self.Stego_key.setText(_translate("Dialog", "Input Stego Key"))
    
    def browse_file(self):
     options = QtWidgets.QFileDialog.Options()
     file_path, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Pilih File Embedded", "", "WAV Files (*.wav)", options=options)
     if file_path:
        self.input_embedded.setText(file_path)
        self.input_embedded_path = file_path
        print(f"File dipilih: {self.input_embedded_path}")
        

    def extract_file_method(self):
        input_audio = self.input_embedded.text()
        stego_key = self.input_stegokey.text()

        if not input_audio or not stego_key:
            QMessageBox.warning(None, "Input Error", "Semua input harus diisi!")
            return

        try:
        # Hash kunci sebagai validasi tambahan
            key_hash = hashlib.md5(stego_key.encode()).digest()
            print("[DEBUG] Extract key hash:", key_hash)

        # Membuka file WAV
            with wave.open(input_audio, 'rb') as wav_file:
                frames = bytearray(wav_file.readframes(wav_file.getnframes()))

        # Ekstraksi bit dari LSB
            extracted_bits = ''.join(str((byte & 1)) for byte in frames)

        # Konversi bit ke byte
            extracted_bytes = bytearray(int(extracted_bits[i:i+8], 2) for i in range(0, len(extracted_bits), 8))

        # Validasi hash kunci
            extracted_key_hash = extracted_bytes[:len(key_hash)]
            if extracted_key_hash != key_hash:
                QMessageBox.critical(None, "Error", "Kunci yang dimasukkan tidak valid.")
                return

        # Ekstraksi panjang data tersembunyi
            docx_length = struct.unpack('<I', extracted_bytes[len(key_hash):len(key_hash)+4])[0]

        # Ekstraksi data tersembunyi (file DOCX)
            hidden_data = extracted_bytes[len(key_hash)+4:len(key_hash)+4+docx_length]

        # Perhitungan BER
        # Data asli yang digunakan untuk embedding (recreate bits_to_embed)
            data_to_embed = key_hash + struct.pack('<I', docx_length) + hidden_data
            bits_to_embed = ''.join(f'{byte:08b}' for byte in data_to_embed)

        # Hitung jumlah bit yang berbeda (bit error)
            bit_errors = sum(1 for i in range(len(bits_to_embed)) if bits_to_embed[i] != extracted_bits[i])
            total_bits = len(bits_to_embed)
            ber = bit_errors / total_bits

            print(f"[DEBUG] Total bit errors: {bit_errors}")
            print(f"[DEBUG] Total bits: {total_bits}")
            print(f"[DEBUG] BER: {ber:.6f}")

        # Dialog untuk menyimpan file yang diekstrak
            options = QFileDialog.Options()
            output_docx, _ = QFileDialog.getSaveFileName(
                None, "Simpan File Dokumen", "", "DOCX Files (*.docx)", options=options
            )
            if not output_docx:
                QMessageBox.warning(None, "Save Error", "Proses penyimpanan dibatalkan.")
                return

        # Menyimpan data ke file dokumen baru
            with open(output_docx, 'wb') as docx_file:
                docx_file.write(hidden_data)

        # Menampilkan informasi keberhasilan dan nilai BER
            QMessageBox.information(
                None, "Success",
                f"File berhasil diekstrak dan disimpan sebagai {output_docx}\n\nBER: {ber:.6f}\nTotal Bit Errors: {bit_errors}"
            )

        except Exception as e:
            QMessageBox.critical(None, "Error", f"Terjadi kesalahan: {str(e)}")



    def save_extracted_file(self):
    # Periksa apakah ada data yang telah diekstrak
        if not hasattr(self, 'extracted_message') or self.extracted_message is None:
            QMessageBox.warning(None, "Tidak Ada Data", "Tidak ada file yang diekstrak untuk disimpan.")
            return

    # Dialog untuk memilih lokasi penyimpanan
        options = QFileDialog.Options()
        save_path, _ = QFileDialog.getSaveFileName(None, "Simpan File Ekstraksi", "", "DOCX Files (*.docx)", options=options)

        if save_path:
            try:
            # Menyimpan data ke file dokumen baru
                with open(save_path, 'wb') as docx_file:
                    docx_file.write(self.extracted_message)
                QMessageBox.information(None, "Simpan Berhasil", f"File berhasil disimpan di: {save_path}")
            except Exception as e:
                QMessageBox.critical(None, "Simpan Gagal", f"Gagal menyimpan file: {str(e)}")
        else:
            QMessageBox.warning(None, "Save Error", "Proses penyimpanan dibatalkan.")

    
        

    def open_Elgamal(self):
        """Fungsi untuk membuka jendela start"""
        from Elgamal import Ui_Elgamal
        self.window = QtWidgets.QDialog()
        self.ui = Ui_Elgamal()
        self.ui.setupUi(self.window)
        self.window.show()
        
    def open_dekripsi(self):
        """Fungsi untuk membuka jendela dekripsi"""
        from dekripsielgamal import Ui_dekripsielgamal
        self.window = QtWidgets.QDialog()
        self.ui = Ui_dekripsielgamal()
        self.ui.setupUi(self.window)
        self.window.show()
        
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_ekstrakselgamal()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
